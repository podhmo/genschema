{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "oapi-conf",
  "description": "Generated by `./bin/genschema --schema-title oapi-conf --indent    --query github.com/deepmap/oapi-codegen/pkg/codegen.Configuration`",
  "type": "object",
  "additionalProperties": false,
  "properties": {
    "package": {
      "type": "string",
      "description": "PackageName to generate"
    },
    "generate": {
      "$ref": "#/$defs/GenerateOptions"
    },
    "compatibility": {
      "$ref": "#/$defs/CompatibilityOptions"
    },
    "output-options": {
      "$ref": "#/$defs/OutputOptions"
    },
    "import-mapping": {
      "type": "object",
      "additionalProperties": {
        "type": "string"
      },
      "description": "ImportMapping specifies the golang package path for each external reference"
    },
    "additional-imports": {
      "type": "array",
      "items": {
        "$ref": "#/$defs/AdditionalImport"
      }
    }
  },
  "required": [
    "package"
  ],
  "$defs": {
    "AdditionalImport": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "alias": {
          "type": "string"
        },
        "package": {
          "type": "string"
        }
      },
      "required": [
        "package"
      ]
    },
    "CompatibilityOptions": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "old-merge-schemas": {
          "type": "boolean",
          "description": "In the past, we merged schemas for `allOf` by inlining each schema\nwithin the schema list. This approach, though, is incorrect because\n`allOf` merges at the schema definition level, not at the resulting model\nlevel. So, new behavior merges OpenAPI specs but generates different code\nthan we have in the past. Set OldMergeSchemas to true for the old behavior.\nPlease see https://github.com/deepmap/oapi-codegen/issues/531"
        },
        "old-enum-conflicts": {
          "type": "boolean",
          "description": "Enum values can generate conflicting typenames, so we've updated the\ncode for enum generation to avoid these conflicts, but it will result\nin some enum types being renamed in existing code. Set OldEnumConflicts to true\nto revert to old behavior. Please see:\nPlease see https://github.com/deepmap/oapi-codegen/issues/549"
        },
        "old-aliasing": {
          "type": "boolean",
          "description": "It was a mistake to generate a go type definition for every $ref in\nthe OpenAPI schema. New behavior uses type aliases where possible, but\nthis can generate code which breaks existing builds. Set OldAliasing to true\nfor old behavior.\nPlease see https://github.com/deepmap/oapi-codegen/issues/549"
        },
        "disable-flatten-additional-properties": {
          "type": "boolean",
          "description": "When an object contains no members, and only an additionalProperties specification,\nit is flattened to a map. Set"
        },
        "disable-required-readonly-as-pointer": {
          "type": "boolean",
          "description": "When an object property is both required and readOnly the go model is generated\nas a pointer. Set DisableRequiredReadOnlyAsPointer to true to mark them as non pointer.\nPlease see https://github.com/deepmap/oapi-codegen/issues/604"
        },
        "always-prefix-enum-values": {
          "type": "boolean",
          "description": "When set to true, always prefix enum values with their type name instead of only\nwhen typenames would be conflicting."
        },
        "apply-chi-middleware-first-to-last": {
          "type": "boolean",
          "description": "Our generated code for Chi has historically inverted the order in which Chi middleware is\napplied such that the last invoked middleware ends up executing first in the Chi chain\nThis resolves the behavior such that middlewares are chained in the order they are invoked.\nPlease see https://github.com/deepmap/oapi-codegen/issues/786"
        },
        "apply-gorilla-middleware-first-to-last": {
          "type": "boolean",
          "description": "Our generated code for gorilla/mux has historically inverted the order in which gorilla/mux middleware is\napplied such that the last invoked middleware ends up executing first in the middlewares chain\nThis resolves the behavior such that middlewares are chained in the order they are invoked.\nPlease see https://github.com/deepmap/oapi-codegen/issues/841"
        }
      },
      "description": "CompatibilityOptions specifies backward compatibility settings for the\ncode generator."
    },
    "GenerateOptions": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "chi-server": {
          "type": "boolean",
          "description": "ChiServer specifies whether to generate chi server boilerplate"
        },
        "fiber-server": {
          "type": "boolean",
          "description": "FiberServer specifies whether to generate fiber server boilerplate"
        },
        "echo-server": {
          "type": "boolean",
          "description": "EchoServer specifies whether to generate echo server boilerplate"
        },
        "gin-server": {
          "type": "boolean",
          "description": "GinServer specifies whether to generate gin server boilerplate"
        },
        "gorilla-server": {
          "type": "boolean",
          "description": "GorillaServer specifies whether to generate Gorilla server boilerplate"
        },
        "strict-server": {
          "type": "boolean",
          "description": "Strict specifies whether to generate strict server wrapper"
        },
        "client": {
          "type": "boolean",
          "description": "Client specifies whether to generate client boilerplate"
        },
        "models": {
          "type": "boolean",
          "description": "Models specifies whether to generate type definitions"
        },
        "embedded-spec": {
          "type": "boolean",
          "description": "Whether to embed the swagger spec in the generated code"
        }
      },
      "description": "GenerateOptions specifies which supported output formats to generate."
    },
    "OutputOptions": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "skip-fmt": {
          "type": "boolean",
          "description": "Whether to skip go imports on the generated code"
        },
        "skip-prune": {
          "type": "boolean",
          "description": "Whether to skip pruning unused components on the generated code"
        },
        "include-tags": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Only include operations that have one of these tags. Ignored when empty."
        },
        "exclude-tags": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Exclude operations that have one of these tags. Ignored when empty."
        },
        "user-templates": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "description": "Override built-in templates from user-provided files"
        },
        "exclude-schemas": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Exclude from generation schemas with given names. Ignored when empty."
        },
        "response-type-suffix": {
          "type": "string",
          "description": "The suffix used for responses types"
        },
        "client-type-name": {
          "type": "string",
          "description": "Override the default generated client type with the value"
        },
        "initialism-overrides": {
          "type": "boolean",
          "description": "Whether to use the initialism overrides"
        }
      },
      "description": "OutputOptions are used to modify the output code in some way."
    }
  }
}
